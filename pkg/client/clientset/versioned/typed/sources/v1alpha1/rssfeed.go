/*
Copyright 2019 The Knative Authors
Copyright 2019 Scott Nichols

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/n3wscott/rssfeed/pkg/apis/sources/v1alpha1"
	scheme "github.com/n3wscott/rssfeed/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// RssFeedsGetter has a method to return a RssFeedInterface.
// A group's client should implement this interface.
type RssFeedsGetter interface {
	RssFeeds(namespace string) RssFeedInterface
}

// RssFeedInterface has methods to work with RssFeed resources.
type RssFeedInterface interface {
	Create(*v1alpha1.RssFeed) (*v1alpha1.RssFeed, error)
	Update(*v1alpha1.RssFeed) (*v1alpha1.RssFeed, error)
	UpdateStatus(*v1alpha1.RssFeed) (*v1alpha1.RssFeed, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha1.RssFeed, error)
	List(opts v1.ListOptions) (*v1alpha1.RssFeedList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.RssFeed, err error)
	RssFeedExpansion
}

// rssFeeds implements RssFeedInterface
type rssFeeds struct {
	client rest.Interface
	ns     string
}

// newRssFeeds returns a RssFeeds
func newRssFeeds(c *SourcesV1alpha1Client, namespace string) *rssFeeds {
	return &rssFeeds{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the rssFeed, and returns the corresponding rssFeed object, and an error if there is any.
func (c *rssFeeds) Get(name string, options v1.GetOptions) (result *v1alpha1.RssFeed, err error) {
	result = &v1alpha1.RssFeed{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("rssfeeds").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of RssFeeds that match those selectors.
func (c *rssFeeds) List(opts v1.ListOptions) (result *v1alpha1.RssFeedList, err error) {
	result = &v1alpha1.RssFeedList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("rssfeeds").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested rssFeeds.
func (c *rssFeeds) Watch(opts v1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("rssfeeds").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a rssFeed and creates it.  Returns the server's representation of the rssFeed, and an error, if there is any.
func (c *rssFeeds) Create(rssFeed *v1alpha1.RssFeed) (result *v1alpha1.RssFeed, err error) {
	result = &v1alpha1.RssFeed{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("rssfeeds").
		Body(rssFeed).
		Do().
		Into(result)
	return
}

// Update takes the representation of a rssFeed and updates it. Returns the server's representation of the rssFeed, and an error, if there is any.
func (c *rssFeeds) Update(rssFeed *v1alpha1.RssFeed) (result *v1alpha1.RssFeed, err error) {
	result = &v1alpha1.RssFeed{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("rssfeeds").
		Name(rssFeed.Name).
		Body(rssFeed).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *rssFeeds) UpdateStatus(rssFeed *v1alpha1.RssFeed) (result *v1alpha1.RssFeed, err error) {
	result = &v1alpha1.RssFeed{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("rssfeeds").
		Name(rssFeed.Name).
		SubResource("status").
		Body(rssFeed).
		Do().
		Into(result)
	return
}

// Delete takes name of the rssFeed and deletes it. Returns an error if one occurs.
func (c *rssFeeds) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("rssfeeds").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *rssFeeds) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("rssfeeds").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched rssFeed.
func (c *rssFeeds) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.RssFeed, err error) {
	result = &v1alpha1.RssFeed{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("rssfeeds").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
